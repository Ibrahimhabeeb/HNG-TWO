import { Injectable, InternalServerErrorException, Logger } from "@nestjs/common";
import { ConfigService } from "@nestjs/config";
import * as fs from 'fs';
import * as path from 'path';
import { createCanvas } from 'canvas';
import { CountryForImage } from "./dtos/countries.dtos";

@Injectable()
export class ImagesService{
    private readonly logger = new Logger(ImagesService.name);
    
     constructor(private readonly configService: ConfigService) {}

    async generateSummaryImage(
    totalCountries: number,
    top5Countries: CountryForImage[],
    lastRefreshed: Date,
  ): Promise<void> {
    try {
        const imagePath = this.configService.get<string>('IMAGE_CACHE_PATH');
        if (!imagePath) {
            throw new InternalServerErrorException("Unable to load environment variable from .env");
        }
      const dir = path.dirname(imagePath);
      if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
      }


      const width = 800;
      const height = 600;
      const canvas = createCanvas(width, height);
      const ctx = canvas.getContext('2d');


      ctx.fillStyle = '#F0F8FF';
      ctx.fillRect(0, 0, width, height);


      ctx.strokeStyle = '#4682B4';
      ctx.lineWidth = 3;
      ctx.strokeRect(10, 10, width - 20, height - 20);

      ctx.fillStyle = '#191970';
      ctx.font = 'bold 32px Arial';
      ctx.fillText('Country Summary Report', 50, 60);

      ctx.font = 'bold 20px Arial';
      ctx.fillText(`Total Countries: ${totalCountries}`, 50, 110);

      ctx.font = '16px Arial';
      const timestamp = lastRefreshed.toISOString().replace('T', ' ').substring(0, 19);
      ctx.fillText(`Last Refreshed: ${timestamp}`, 50, 140);


      ctx.font = 'bold 22px Arial';
      ctx.fillText('Top 5 Countries by Estimated GDP', 50, 190);


      ctx.font = '16px Arial';
      let y = 230;
      let rank = 1;

      for (const country of top5Countries) {
        const gdpFormatted = this.formatGdp(country.estimatedGdp);
        const line = `${rank++}. ${country.name} - $${gdpFormatted}`;

        ctx.fillStyle = '#006400';
        ctx.fillText(line, 70, y);

        // Additional info
        ctx.fillStyle = '#696969';
        ctx.font = 'italic 14px Arial';
        const info = `   Region: ${country.region} | Population: ${this.formatNumber(country.population)} | Currency: ${country.currencyCode}`;
        ctx.fillText(info, 70, y + 20);

        ctx.font = '16px Arial';
        y += 60;
      }

      ctx.fillStyle = '#808080';
      ctx.font = 'italic 12px Arial';
      ctx.fillText('Generated by Country Currency API', 50, height - 30);


      const buffer = canvas.toBuffer('image/png');
      fs.writeFileSync(imagePath, buffer);

      this.logger.log(`Summary image generated successfully at: ${imagePath}`);
    } catch (error) {
      this.logger.error('Failed to generate summary image', error);
      throw new Error('Failed to generate summary image');
    }
  }
 private formatGdp(gdp: any): string {
    if (!gdp) return 'N/A';

    const value = typeof gdp === 'bigint' ? Number(gdp) : Number(gdp.toString());

    if (value >= 1_000_000_000_000) {
      return `${(value / 1_000_000_000_000).toFixed(2)}T`;
    } else if (value >= 1_000_000_000) {
      return `${(value / 1_000_000_000).toFixed(2)}B`;
    } else if (value >= 1_000_000) {
      return `${(value / 1_000_000).toFixed(2)}M`;
    }
    return value.toFixed(2);
  }

  private formatNumber(num: bigint | number): string {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
  }

    getImagePath(): string {
    
        const imagePath = this.configService.get<string>('IMAGE_CACHE_PATH');
        if (!imagePath) {
            throw new InternalServerErrorException("Unable to image path from .env")
        }
        return imagePath;
  }
    



}